DATA STRUCTURES

What?
- is a way of organizing data so that it can be used effectively

Why?
- They are essential ingredients in creating fast and powerful algorithms.
- They help to manage and organized data.
- They make code cleaner and easier to understand.



ABSTRACT DATA TYPE VS. DATA STRUCTURES

Abstract Data Type:
- an abstraction of a data structure which provides only the interface to which a data structure must adhere to.
- The interface does not give any specific details about how something shoud be implemented or in what programming language.

Example:
    ADT          |    DS

- LIST 				Dynamic Array
					Linked List

- QUEUE				Linked List based Queue
					Array based Queue
					Stack Based Queue

- MAP				Tree Map
					Hash Map / Hash Table

- VEHICLE			Golf Cart
					Bicycle
					Smart Car

COMPLEXITY ANALYSIS
Big-O Notation:
- gives an upper bound of the complexity in the worst case, helping to quantify performance as the input size becomes arbitrily large.

Constant Time: O(1)
Logarithmic Time: O(log(n))
Linear Time: O(n)
Linearithmic Time: O(nlog(n))
Quadric Time: O(n^2)
Cubic Time: O(n^3)
Exponential Time: O(b^n), b>1
Factorial Time: O(n!)

Bif-O Properties:
O(n+c) = O(n)

NOTE on Big-O:
- Find all subsets of a set - O(2^n)
- Finding all permutations of string - O(n!)
- Sorting using mergesort - O(nlogn)
- Interating over all the cells in a matrix of size n by m - O(nm)
